terraform {

  required_version = ">= 1.8.0"

  required_providers {
    proxmox = {
      source = "telmate/proxmox"
      version = ">= 2.9.14"
    }
  }
}

provider "proxmox" {
  pm_api_url        = "${var.proxmox_api_url}"
  pm_tls_insecure   = "${var.proxmox_skip_tls_verify}"

  pm_user           = "${var.proxmox_api_token_id}"
  pm_password       = "${var.proxmox_api_token_password}"
}

resource "proxmox_vm_qemu" "cloudinit-test" {
  for_each = var.vms_config

  target_node = each.value.node
  name        = each.value.name
  desc        = each.value.desc

  clone = each.value.clone

  # The destination resource pool for the new VM
  pool = var.proxmox_pool

  storage = "local"
  cores   = 3
  sockets = 1
  memory  = 2560
  disk_gb = 4
  nic     = "virtio"
  bridge  = "vmbr0"

  ssh_user        = "root"
  ssh_private_key = <<EOF
-----BEGIN RSA PRIVATE KEY-----
private ssh key root
-----END RSA PRIVATE KEY-----
EOF

  os_type   = "cloud-init"
  ipconfig0 = "ip=10.0.2.99/16,gw=10.0.2.2"

  sshkeys = <<EOF
ssh-rsa AABB3NzaC1kj...key1
ssh-rsa AABB3NzaC1kj...key2
EOF

  provisioner "remote-exec" {
    inline = [
      "ip a"
    ]
  }
}

/* Uses custom eth1 user-net SSH portforward */
resource "proxmox_vm_qemu" "preprovision-test" {
  for_each = var.vms_config

  name        = each.value.name
  desc        = each.value.desc
  target_node = each.value.node

  clone = each.value.clone

  # The destination resource pool for the new VM
  pool = var.proxmox_pool

  cores    = each.value.cores
  sockets  = 1
  # Same CPU as the Physical host, possible to add cpu flags
  # Ex: "host,flags=+md-clear;+pcid;+spec-ctrl;+ssbd;+pdpe1gb"
  cpu      = each.value.cpu_type
  numa     = true
  memory   = each.value.memory
  scsihw   = "virtio-scsi-single"
  # Boot from hard disk (c), CD-ROM (d), network (n)
  boot     = "cdn"

  agent = 1

  # It's possible to add this type of material and use it directly
  # Possible values are: network,disk,cpu,memory,usb
  hotplug  = 0

  # Default boot disk
  # bootdisk = "virtio0"
  # HA, you need to use a shared disk for this feature (ex: rbd)
  hastate  = ""

  #Display
  vga {
    type   = "virtio"
    #Between 4 and 512, ignored if type is defined to serial
    memory = 512
  }

  network {
    # id     = 0
    model  = "virtio"
    bridge = "vmbr0"
  }

  disk {
    # id           = 0
    cache        = "writeback"
    emulatessd   = true
    iothread     = true
    type         = "scsi"
    storage      = "local-lvm"
    size         = 512
  }

  vga {
    type   = "virtio"
    memory = 512
  }
  # Serial interface of type socket is used by xterm.js
  # You will need to configure your guest system before being able to use it
  # serial {
  #   id   = 0
  #   type = "socket"
  # }
  
#   preprovision    = true
#   ssh_forward_ip  = "10.0.0.1"
#   ssh_user        = "terraform"
#   ssh_private_key = <<EOF
# -----BEGIN RSA PRIVATE KEY-----
# private ssh key terraform
# -----END RSA PRIVATE KEY-----
# EOF

  os_type           = "windows"
#   os_network_config = <<EOF
# auto eth0
# iface eth0 inet dhcp
# EOF

  # connection {
  #   type        = "ssh"
  #   user        = self.ssh_user
  #   private_key = self.ssh_private_key
  #   host        = self.ssh_host
  #   port        = self.ssh_port
  # }

  # provisioner "remote-exec" {
  #   inline = [
  #     "ip a"
  #   ]
  # }

  provisioner "local-exec" {
    command = "./scripts/vm_ip-address_checker.sh ${self.vm_id} ${each.value.SID}"
    when    = create
  }

  provisioner "local-exec" {
    command = "rm -f /root/TA-Automation/terraform/proxmox/win11_cloudbase-init/vm_ip-address/*-${self.vm_id}.txt"
    when    = destroy
  }
}